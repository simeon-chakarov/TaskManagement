@model TaskManagement.ViewModels.TaskManagement.TaskFormViewModel
@{
    string assignValue = Model.Developer == null ? string.Empty : Model.Developer.Name;
}

<h2>@Model.Title</h2>

@using (Html.BeginForm("Create", "Tasks"))
{
    <div class="form-group">
        @Html.LabelFor(c => c.Name)
        @Html.TextBoxFor(c => c.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.TaskTypeId)
        @Html.DropDownListFor(c => c.TaskTypeId, new SelectList(Model.TaskTypes, "Id", "Name"), "Select Task Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.TaskTypeId)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.TaskStatusId)
        @Html.DropDownListFor(c => c.TaskStatusId, new SelectList(Model.TaskStatuses, "Id", "Name"), "Select Task Status", new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.TaskStatusId)
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.RequiredByDate)
        @Html.EditorFor(c => c.RequiredByDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
        @Html.ValidationMessageFor(c => c.RequiredByDate)
    </div>
    <div class="form-group">
        <label>Assigned to</label>
        <div class="tt-container">
            <input id="assign" name="assign" type="text" value="@assignValue" class="form-control" style="width:200%" />
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(c => c.Description)
        @Html.TextAreaFor(c => c.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(c => c.Description)
    </div>

    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.CreatedDate)
    @Html.HiddenFor(m => m.DeveloperId, new { id = "developerId" })

    @Html.AntiForgeryToken();

    <button type="submit" class="btn btn-primary" style="margin-top:0px;">Save</button>
    @Html.ActionLink("Back", "Index", "Tasks", null, new { @class = "btn btn-default" })
}

@section scripts
{    
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $(".datepicker").datepicker({                
                changemonth: true,
                changeyear: true
            });

            var input = $('#assign');
            var developerId = $("#developerId");

            var developers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/developers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            input.typeahead({
                minLength: 1,
                highlight: true
            }, {
                name: 'assign',
                display: 'name',
                source: developers,
            }).on("typeahead:select", function (e, developer) {
                developerId.val(developer.id);
            }).on("typeahead:change", function (e, inputValue) {
                $.ajax({
                    url: "/api/developers?query=" + inputValue,
                    method: "GET",
                    success: function (developers) {
                        if (inputValue.length > 0 && developers.length > 0) {
                            developerId.val(developers[0].id);
                            input.val(developers[0].name);
                        }
                        else {
                            developerId.val(null);
                            input.val(null);
                        }
                    },
                })
            });
        });
    </script>
}